use pairs in order to find

Evaluating Rulse
1. Rename of Headers
2. Join on tables
3. Project on head predicate attributes
4. Union new tuples

Take each Relation and copy it, then create a new object and pass both into another relation and call the Rule Evaluator function or join function.

Create new Database operations
Join:
    steps:
        1. Combine r1s headers with r2s header
        2. test t1 and t2 to see if they can join
        3. join t1 and t2
    Algorithm:
        1. Make the header h for the resulting header of joining the two relations
            a. Here I should calculate which columns should overlap.
            b. I need to determine which kind of join it is.
        2. Make a new relation r using the new header h
        3. For each tuple in r1 compare to each tuple in t2 and check to see if they can be joined. If so, create a new tuple and add it to r.

Project:
    Change it so that it can support changing the order of columns.

Inside of my interpreter class:
EvaluateRules:
    Steps:
        1. Process schemes
        2. Process facts
        3. Evaluate rules (this is where I need to code)
        4. Evaluate queries
    How to evaluate rules:
        1. Evaluate Predicates on the right hand side of the rule.
            Evaluate each one in the same way you evaluate queries
            Each predicate should create a new relation
        2. Join the relations that resulted from step 1.
            Join them if there is more than 1. Else return the one result
        3. Project the columns that appear in the head predicate
            Get rid of the variables that don't appear in the head and switch the order to match that of the variables in the head.
        4. Rename the relation from step three to match the name of the head predicate. Also, rename each attribute to that relations attributes by their cor
            responding positions.
        5. Union with the relation in the database.
            I will need to create a union function for this.
            Keep a class counter of the unions

 Fixed point algorithm
    1. If an iteration over the rules results in at least one addition to any relation in the database, then evaluateRules is called again.
        Set the class counter of additions to 0 again.
        NOTE: I could use set.insert instead to check this.

 Output:
 Two parts:
    1. Rule Evaluation
    2. Query Evaluation

 Assumptions
    The head ov every rule will only include variable names.
    None of the variable names are the same
